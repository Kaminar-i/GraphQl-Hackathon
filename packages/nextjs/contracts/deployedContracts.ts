/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    StudentRegistryV2: {
      address: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      abi: [
        {
          inputs: [],
          name: "NameIsEmpty",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint8",
              name: "age",
              type: "uint8",
            },
            {
              internalType: "uint8",
              name: "expectedAge",
              type: "uint8",
            },
          ],
          name: "UnderAge",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "oldOwner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "ChangeOwner",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "_studentAddr",
              type: "address",
            },
          ],
          name: "addStud",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "_studentAddress",
              type: "address",
            },
          ],
          name: "authorizeStudentReg",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "_studentAddress",
              type: "address",
            },
            {
              indexed: false,
              internalType: "string",
              name: "_StName",
              type: "string",
            },
            {
              indexed: false,
              internalType: "uint8",
              name: "_stAge",
              type: "uint8",
            },
          ],
          name: "registerStudent",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_studentAddr",
              type: "address",
            },
          ],
          name: "authorizeStudentRegistration",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "_newOwner",
              type: "address",
            },
          ],
          name: "changeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_studentAddr",
              type: "address",
            },
          ],
          name: "deleteStudent",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "getBalance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getOwner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint8",
              name: "_studentId",
              type: "uint8",
            },
          ],
          name: "getStudent",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "studentAddr",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "studentId",
                  type: "uint256",
                },
                {
                  internalType: "uint8",
                  name: "age",
                  type: "uint8",
                },
                {
                  internalType: "bool",
                  name: "hasPaid",
                  type: "bool",
                },
                {
                  internalType: "bool",
                  name: "isAuthorized",
                  type: "bool",
                },
              ],
              internalType: "struct Student",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_studentAddr",
              type: "address",
            },
          ],
          name: "getStudentFromMapping",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "studentAddr",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "studentId",
                  type: "uint256",
                },
                {
                  internalType: "uint8",
                  name: "age",
                  type: "uint8",
                },
                {
                  internalType: "bool",
                  name: "hasPaid",
                  type: "bool",
                },
                {
                  internalType: "bool",
                  name: "isAuthorized",
                  type: "bool",
                },
              ],
              internalType: "struct Student",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_studentAddr",
              type: "address",
            },
          ],
          name: "getStudentHaspaidMapping",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_studentAddr",
              type: "address",
            },
          ],
          name: "getStudentTemporaryMapping",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "studentAddr",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "studentId",
                  type: "uint256",
                },
                {
                  internalType: "uint8",
                  name: "age",
                  type: "uint8",
                },
                {
                  internalType: "bool",
                  name: "hasPaid",
                  type: "bool",
                },
                {
                  internalType: "bool",
                  name: "isAuthorized",
                  type: "bool",
                },
              ],
              internalType: "struct Student",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "hasPaidMapping",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "_newOwner",
              type: "address",
            },
          ],
          name: "modifyOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "payFee",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_studentAddr",
              type: "address",
            },
            {
              internalType: "string",
              name: "_name",
              type: "string",
            },
            {
              internalType: "uint8",
              name: "_age",
              type: "uint8",
            },
          ],
          name: "register",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "studentsMapping",
          outputs: [
            {
              internalType: "address",
              name: "studentAddr",
              type: "address",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "studentId",
              type: "uint256",
            },
            {
              internalType: "uint8",
              name: "age",
              type: "uint8",
            },
            {
              internalType: "bool",
              name: "hasPaid",
              type: "bool",
            },
            {
              internalType: "bool",
              name: "isAuthorized",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "tempstudentsMapping",
          outputs: [
            {
              internalType: "address",
              name: "studentAddr",
              type: "address",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "studentId",
              type: "uint256",
            },
            {
              internalType: "uint8",
              name: "age",
              type: "uint8",
            },
            {
              internalType: "bool",
              name: "hasPaid",
              type: "bool",
            },
            {
              internalType: "bool",
              name: "isAuthorized",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_studentAddr",
              type: "address",
            },
            {
              internalType: "string",
              name: "_name",
              type: "string",
            },
            {
              internalType: "uint8",
              name: "_age",
              type: "uint8",
            },
          ],
          name: "updateStudentMapping",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        changeOwner: "contracts/Ownable.sol",
        getBalance: "contracts/Ownable.sol",
        getOwner: "contracts/Ownable.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
